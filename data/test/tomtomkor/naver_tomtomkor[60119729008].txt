Title:
갤럭시s: 메모리 패치란? 

Date:
2010.12.09 16:35

Content:








갤럭시s 사용자라면 대부분루팅, 메모리패치 얘기를 들어봤을 겁니다. 특히 메모리 패치는 갤럭시s의 구동속도를 높여준다고 하니 관심이 가지 않을 수 없지요. 그래서 많은 사람들이일단 따라하는 경우가 많습니다.

그렇게 해서 사용이 전보다 쾌적해졌다면 사실 그것으로 끝이죠. 하지만 궁금하지 않습니까? 도대체 뭐가 어떻게 되는 건지 말이죠.^^ 그래서 정리해 보았습니다.



1. 왜 패치를 하는가?


처음 갤럭시s를 접하고 실망했다는 글을 올린 적이 있습니다.(http://tomtomkor.blog.me/60111908413)프로그램 좀 깔고 났더니 화면이 멈칫거리고 버벅이는 게기대와 달라 실망스러웠죠.

이유는 메모리 때문입니다. 앞서 메모리 확보법(http://tomtomkor.blog.me/60119321463)이라는 글에서 잠시 언급했었습니다만, 갤럭시s의 메모리는 512M의 RAM과 16G의 메모리로 구성되어 있습니다. 하드웨어 적으로 얘기하면 프로그램 구동에 사용되는512M는원낸드메모리로, 저장공간 16G는 모비낸드메모리입니다. 

문제는 원낸드에 비해 모비낸드는 가격은 저렴하지만 데이터입출력 속도가 매우느리다는데서 발생합니다. 이 모비낸드의 입출력 속도는 마이크로 sd카드보다도 느리다는 이상한(?) 얘기가 있을 정도니까요.

또 다른 한 가지 이유는 갤럭시s에서 채택하고 있는 파일포맷방식입니다. 윈도우즈에는 NTFS와FAT의 두 가지 포맷만이 존재하지만, 리눅스 -- 안드로이드는 리눅스계열입니다. -- 에는 ReiserFS, XFS, JFS, GFS, ext, nilfs 등 다양한 포맷방식이 존재합니다. 갤럭시에 적용된 포맷방식은rfs(robust file systme)라고 하는데 이게 안정성은 뛰어난 대신에 데이터 입출력 속도가 느립니다.

결국 모비낸드라는 하드웨어와 rfs라는 소프트웨어의 결합으로IO lag 현상이눈에 띄게 발생하는 겁니다. 즉, 버벅거리게 된다는 얘기죠. 이 문제를 해결하기 위해 나온 게 메모리 패치입니다.



2. 패치를 꼭 해야 하나?


그렇지 않습니다. 이번에 프로요로 업되면서 속도가 많이 좋아졌다고 느꼈습니다. 이클레어에서 느꼈던 정도의 답답함은 없었습니다. 프로요 자체에 의한 성능향상도 있겠지만, 삼성에서 나름 노력을 했던 것 같습니다. 본인이 느리거나 답답하다고 느끼지 않는 이상 굳이 할 필요 없습니다. 

그러나 패치를 적용하고 performance가 개선되는 걸 일단 보면 그 유혹을 이겨내기 어렵습니다. 인터넷에 포스팅되어 있는 많은 벤치마크 비교 결과를보게되어도 그렇구요.^^



3. 메모리 패치의 개념과 종류


사용자 입장에서 문제에 접근할 수 있는 방법은 하나 뿐입니다. 기판에 붙어있는 모비낸드를 바꿀 수는 없는 거고, 결국 포맷방식을 변경하는 거지요. 보다 IO 효율이 좋은 방식으로 말이죠.

그렇다고 모비낸드 16G 전체를 건드리는 건 아닙니다. 시스템 영역(2G부분)에만적용합니다. 그리고 그 부분을 2G의 시스템 영역에서 sd카드로 옮기기도 합니다. OCLF, 부두, 테그라크 등 여러가지 종류의 패치방식들이 많지만개념은 다른 파일포맷방식을 적용한다는 겁니다.


패치의 종류는 크게 내장과 외장으로 나눌 수 있습니다. 부두, 테그라크, OCLF 등은 개발자가 이름을 갖다 붙인 것이고, 내용면으로는 크게 두 가지입니다. 내장패치는 시스템 영역을 새로운 포맷방식으로 바꾸는데 그치지만, 외장패치는 그 포맷형식이 바뀐 시스템 영역을 다른 곳으로 옮기기까지 합니다. 

옮겨 갈 수 있는 부분은 14G의 내장 sdcard 또는 사용자가 부착한 외장 마이크로 sd카드 둘 중 하나일 것입니다.그런데 내장sd보다는 외장sd로 옮기는 것이 보다 합리적으로 보입니다.

16G의 모비낸드 부분은 시스템(2G)영역과 저장공간(14G, sdcard)으로 구성되어 있습니다. 2G에는 어플들이 설치되어 있습니다. 그리고 14G엔 사진, 노래 같은 자료들이 저장되어 있지요. 근데 이게 하나의 모비낸드 콘트롤러를 통해 IO가 이루어집니다. 바쁘겠지요? 그래서 시스템부분을 외장sd카드로 옮겨주는 겁니다. 부담을 줄여주자는 거죠.

또 흔히 사용하는 ext 계열의 포맷방식은 IO가 빈번하게 일어납니다. 따라서 메모리의수명에도 영향을 줄 수 있습니다. (요 얘긴 조금 있다가 자세히) 그렇다면 보드에 있는 메모리보다는 언제든 구입해서 새로 장착할 수 있는 외장카드가 낫겠죠.

단점도 있습니다. 적어도 전원이 켜진 상태에서는 sd카드를 폰에서 절대로 분리할 수 없습니다.(시스템영역이 거기에 있으니 구동에 문제가 생기는 건 당연한 얘기겠지요.) sd카드 교체시 패치를 처음부터 다시 해주어야 합니다. 또 원래의 시스템영역(모비낸드)을제대로 활용하지 못하게 됩니다. 마지막으로 가격이 얼마든 따로 마이크로 sd카드를 구입해야 한다는 점도 있구요.


여기서 한 가지 첨언하자면 여러가지 방식을 중복해서 (예: 내장패치 + 외장패치) 적용하는 경우도 있던데 패치의개념에서본다면 노력에 비해 효과를 기대하기 어렵습니다. 오히려 불안정성을 가중시키는 일이 될 수 있습니다.



4. 어떤 방식이 좋을까?


똑똑한 인재들이 모였다는 삼성이모비낸드와 rfs의문제점을 모르는 바보일까요?더구나 사용자들 사이에서그토록 패치가 유행하고 있는데?귀머거리, 벙어리일까요? 제 생각엔그렇지 않다입니다. 

현재 메모리 패치에 사용되는 포맷방식은ext와 nilfs가 대표적입니다.(적용 포맷에따라 패치종류를 구분할 수도 있을 겁니다.)

이중 nilfs는벤치마크 자료 등에서 좋은 성능을보이지만, 아직 실험적인 포맷방식이며 안정성에 대해서는 보장할 수 없는 상태입니다. 일반 대중에게 많이 팔리는 상업상품에 적용하기엔 아직은 모험이 따르죠. 

한편 ext 방식으론 ext2와ext4가 있습니다. (ext3도 있다고 합니다만.)IO 성능상으론 두 포맷 간에 차이점은 별로 없습니다. (http://www.delltechcenter.com/page/A+Comparison+of+Ext2,+Ext3+and+Ext4+Performance) 물론 rfs방식보다 빠릅니다. 그러나 이들 방식에도 단점이 존재합니다. 









먼저 ext2의 경우는 전원이 갑작스레 끊어질 경우 문제가 됩니다. 리눅스 시스템은 종료시 모든 캐시 데이터를 디스크에 저장하고 파일시스템이 정확하게 unmount되었음을 확인합니다. 하지만, 갑작스러운 정전 또는 시스템 다운이 발생하면재부팅시파일시스템이제대로 언마운트 되지 않았음이 밝혀지고파일시스템 드라이버들이 정상적으로 작동하지 못하는 상황이 됩니다.

이럴 경우파일시스템 전체를 검사하고 정상적이 아니라면 에러를 수정하는 과정을 거치게 됩니다. 문제는 이게 꽤나 오래 걸린다는 점, 그리고드물겠지만 복구 불가능한 치명적인 오류가 발생할 가능성도 아주 배제할 수는 없다는 겁니다.

ext4는 이러한 문제점을 보완하기 위해 저널링(journaling)이라는 방법을 사용합니다. 시스템 파일이 변경될 경우 먼저 그 내역을 기록해 두도록 하는 거지요. 그리고 문제가 생겼을 때는 그 내역을 보고 문제부분에 집중하면신속하게 복구할 수 있겠죠. 반면 이러한 저널링은 매우 잦게 발생하기 때문에 메모리의 수명 단축을 가져올 수 있습니다.

결국 삼성은포맷방식의장단점을 나름고려해서 효율성보다는 안정성이 높은 rfs를 꿋꿋이 유지하고 있는 걸로추측해 볼 수 있겠습니다. 그것이 소비자들에게 답답함을 주더라도 기업입장에서는안전할테니까 말이죠.

어떤 패치방식을 쓰느냐 하는 건 이러한포맷방식의 장단점, 앞서 언급한 내외장 방식간의 장단점을 고려해서 선택해야 겠지요.그건 개인의 선택 문제일 거고 따라서 정답은 없습니다.(처음 얘기했듯이 뭔가를 제시하고자 적은 글이 아니라, 궁금해서 나름 공부하고 정리한 겁니다. ㅎㅎ)

어떤 패치방식이든 '체감' performance는 그리 크게 차이나지 않는 걸로 평가되고 있습니다. 패치 적용 및 환원의편리성도 날이 갈수록 좋아지고 있구요. 다만,안정성 측면에서 보자면 외장sd 패치방식이 좀 더 바람직하다고 볼 수는 있겠죠. 그렇다고이 역시정답이라고 얘기하기 어렵습니다. 어차피 2년 약정 끝나면 다른 기종으로 갈아타는 마당에 수명연장이라는 게 별 의미 없다고 할 수도 있으니까요.^^



	
