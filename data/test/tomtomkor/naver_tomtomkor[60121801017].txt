Title:
갤럭시s 반응속도 높이기: IO 스케쥴러 변경 

Date:
2011.01.13 08:30

Content:



이번 갤럭시 펌업(SL28)은 좀 까다롭군요. 루팅절차도 예전보다 복잡해졌고, 메모리패치도 테크라크 원낸드를 제외하고는예전처럼 신속하게 나오지 않고 있네요.

현재 유일하게 나와있는 테그라크 원낸드 패치는 파일포맷을 RFS에서 EXT4로 변경하는 이외에 순정에서 시스템용도로 쓰이는 메모리위치와 어플설치용으로 쓰이는 메모리위치를 서로 바꾸는 겁니다. 이유는 순정에서 시스템이 사용하는 부분이 원낸드메모리로 모비낸드메모리보다 10배 정도 I/O 속도가 빠르기 때문. 즉 빠른 메모리에 어플을 설치해서구동속도를 높이자는 겁니다.

그런데 없지 않아 단점이 있습니다. 시스템용도로 쓰이던 원낸드 메모리의 크기가 작기 때문에 어플 설치공간이 대폭 줄어든다는 겁니다.(1.87G - 292M) 물론 이 문제는자주 쓰지 않는 어플을 외장sd카드에 설치함으로써 어느 정도 극복이 가능합니다. 또 예전의OCLF나 Z4mod를 사용할 때보다 살짝 더 복잡합니다. 별도로 Odin을 이용해서 커널을 바꿔주어야 하지요.


앞으로도 갤럭시s 펌업은 계속될 것으로 예상됩니다. 잘하면진저브레드(안드로이드 2.3)로 업도 될 거 같구요. 그 때문에 Odin을 사용한 패치방법은 선호하지 않습니다. 귀챠니즘 때문이죠.^^ 그 동안 OCLF(One Click Lag Fix)라는 어플을 이용한 패치를 사용해 왔는데 SL28 이후론 제대로 적용이 안되어 아쉽습니다.




 


현재로서는맘에 끌리는 패치가 없고, 그럼 뭐 좀 갤럭시s의 버벅거림을 보완해줄 만한 다른 방법은 없을까? 있습니다. I/O 스케줄 방식을 바꾸는 겁니다.
 
I/O 스케쥴링이란 쉽게 생각해서 Read/Write 작업순서를 정하는 거라고 이해하면 되겠습니다. 리눅스 OS(안드로이드는 리눅스계열입니다.)에서 사용되는 I/O 스케쥴링 방식엔 다음과 같은 것들이 있습니다.


Anticipatory scheduler 

어떤 프로세스의읽기가끝날 때쯤(아직 안끝났음) 미리 다음 데이터를 가져오려 합니다. 문제는 동시에 여러 개의읽기요청이존재하는 경우자료검색으로 인해 작업부하가 크게 늘어나고 전체적인 performance가 떨어지게 됩니다. 이것을 Deceptive Idleness라고 하는데,이를 방지하기위해 가져올 데이터가 없는 것처럼I/O 휴식시간을 강제로 잠깐 부여합니다.하드디스크의 I/O 스케쥴링에 사용되던 방식으로 현재는 CFQ로 대체되어 거의 사용되지 않고 있습니다.


CFQ(Completely Fair Queuing)

많은 리눅스 OS -- 리눅스도 버전이 여러가지입니다 -- 에서 디폴트(기본값)로 사용되고 있습니다. 자세한 내용은 복잡합니다.그냥프로세스 실행시 CPU 자원할당을 조절함으로써 전반적인작업처리 효율을높이고자 하는 방식이라고 이해하면 되겠습니다.^^ 갤럭시s에서도 기본값으로 사용되고 있습니다.

Noop scheduler 

가장 간단한 방식으로 선입선출(First In, First Out)원칙에 의해I/O를 처리합니다. 하드디스크보다는 플래시 메모리처럼 물리적인 데이터 접근절차(예: 디스크의 회전)가 필요없는 기록장치에서 흔히 사용됩니다.

Deadline scheduler

이 방식에선 일반적인 I/O que(처리순서 목록)이외에 읽기와 쓰기별로 2개의 추가적인 deadline(처리시한)que를 사용합니다. 

I/O que에 따라 다음 요청을 처리하기 전에deadline que를먼저 살펴보고 거기에 처리시한이 지난 요청사항이 있으면그걸서둘러 수행하게 됩니다. 없으며 I/O que의 처리목록을 실행하구요.그런데 읽기 deadline que의 요청사항에 대해선 500ms라는 굉장히 짧은 처리시한이 부여됩니다. (반면 쓰기의 처리시한은 5초) 따라서 금방 시한을 어기게될테니 주로 읽기 deadline que에 있는사항을 우선 처리하게 되겠죠.



좀 복잡하죠? 저도 대강이나마 이해하느라 힘들었습니다.^^

이제 갤럭시s의 문제로 돌아가 보죠. 갤럭시s의 버벅거림은 RFS라는 파일포맷시스템, 모비낸드라는 느린 메모리에 기인하는 것이었습니다. 다시 말해서 I/O 처리 중 지연현상이 발생한다는 겁니다. (http://tomtomkor.blog.me/60119729008)



그 점을 염두에 두고 위에 언급된 스케쥴 방식들을 살펴본다면 어떤 방식이 가장 유리할까요?

Anticipatory와 CFQ 방식은전체적인 작업처리량, 즉 throughput을 높이는데 중점을두고 있으며, Noop의 FiFo 방식은너무 단순합니다.

이에 비해서 Deadlin은 I/O, 그중에서도 읽기에 우선을 두는 방식입니다.새로운 입력이 있을 경우 그에 대한반응 면에서다른 방식보다 효과적일 것입니다.말하자면 화면을 터치(Input)했을 때의 버벅거림 또는 멈칫거림, 즉 지연현상(delay, lag)을 줄여줄 수 있을 겁니다.(수치로 된 객관적 실증자료는 없습니다.^^)
 
단,Deadline 적용은 I/O 빈도를 늘려서 메모리 수명에 영향을 줄 수 있습니다. 하지만약정 끝나면 폰을 바꿀거니까 그렇게 신경쓸 사항은 아니라고 생각합니다. 초기엔 몰라도 하루 종일 폰 만지작거릴사람도 없을 거구요.ㅎㅎ



그러면 변경방법은? 쉽습니다. 

마켓에서Galaxy Tuner라는 어플을 찾아서 설치하세요. 단, 루팅이 되어 있어야 합니다. 아래 사진에서처럼 세팅하고 Apply 단추를 누르면 끝입니다.다음부팅 이후에는 Deadline Scheduler가 적용됩니다.마켓에 올라와 있는 IO Sched라는, 같은 분이 만든 어플도 마찬가지 기능을 합니다. 또 OCLF -- 마켓에선 사라졌죠 -- 에도 동일한 기능이 있습니다. CFQ로의 복원도 간단합니다.







프로요 업데이트 이후로 갤럭시s의 버벅거림 현상은눈에 띄게개선되었더군요. 최근 SL28로의 펌업 이후 더욱 그런 것 같기도 하고... 어쨌든 메모리 패치를 하지 않아도 체감상 큰 불편이 없을 정도까지 된 것 같습니다. 앞으로 메모리패치 굳이 안해도무방할것 같다는 생각마저 듭니다.^^
 
거기에 IO 스케쥴러를 변경하면 더욱 부드럽고 반응이 빠르다는느낌을 받을 수 있을 겁니다.(제 경우엔 그렇습니다.) 참, 이거 했다고 Quadrant나 RL Benchmark 결과가 크게 좋아지거나 하진 않습니다. Input에 대한 반응속도를 높여주는 것 뿐이니까요.



※ 참고 - 갤럭시s SL28 루팅법: http://tomtomkor.blog.me/60121461448

 




	
